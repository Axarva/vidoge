name: Build and Release Vidoge

on:
  # Trigger the workflow when a tag with the 'v' prefix is pushed (e.g., v1.1.3)
  push:
    tags:
      - 'v*'

jobs:
  # Job 1: Build artifacts for both platforms and upload them as temporary artifacts
  build-artifacts:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read # Only needs read permission for checkout and upload-artifact

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # --- FFmpeg Download Step for macOS ---
      - name: Download and Extract FFmpeg (macOS)
        if: runner.os == 'macOS'
        run: |
          DOWNLOAD_URL="https://github.com/Axarva/vidoge/releases/download/ffmpeg-binaries/ffmpeg-bundle.zip"
          ZIP_FILE="ffmpeg-bundle.zip"
          TARGET_DIR="vendor/ffmpeg"
          
          mkdir -p $TARGET_DIR 
          
          echo "Downloading FFmpeg bundle from $DOWNLOAD_URL"
          curl -L "$DOWNLOAD_URL" -o $ZIP_FILE
          
          echo "Extracting FFmpeg bundle to $TARGET_DIR"
          unzip -o $ZIP_FILE -d $TARGET_DIR
        shell: bash

      # --- FFmpeg Download Step for Windows ---
      - name: Download and Extract FFmpeg (Windows)
        if: runner.os == 'Windows'
        run: |
          $DownloadURL = "https://github.com/Axarva/vidoge/releases/download/ffmpeg-binaries/ffmpeg-bundle.zip"
          $ZipFile = "ffmpeg-bundle.zip"
          $TargetParentDir = "vendor"
          
          New-Item -ItemType Directory -Force -Path $TargetParentDir
          
          Write-Host "Downloading FFmpeg bundle from $DownloadURL"
          Invoke-WebRequest -Uri $DownloadURL -OutFile $ZipFile
          
          Write-Host "Extracting FFmpeg bundle to $TargetParentDir"
          Expand-Archive -Path $ZipFile -DestinationPath $TargetParentDir -Force
        shell: pwsh

      # --- Build Artifacts (PACKAGE, but DO NOT PUBLISH) ---
      - name: Build Packages (Do not publish)
        # -p never creates the final .exe, .dmg, and .zip files without publishing them.
        run: npm run dist -- -p never 
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          # Use a single artifact name for all runners
          name: vidoge-final-packages-${{ matrix.os }}
          # Upload the entire 'dist' folder which contains all final files
          path: dist/ 

  # Job 2: Release (Waits for builds, downloads all artifacts, and publishes once)
  release:
    needs: build-artifacts # Runs only after both Windows and macOS builds are done
    runs-on: ubuntu-latest
    
    permissions:
      contents: write # Needs write permission to create/update the final release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages # Download everything into 'packages'

      - name: Extract Final Installers
        run: |
          # Unzip the single downloaded artifact zip file to access the installers
          cd packages
          find . -name "*.zip" -exec unzip -o {} \;
        shell: bash

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Targets the existing tag name (e.g., v1.1.3)
          tag_name: ${{ github.ref_name }} 
          # Files are now exposed by the extraction step
          files: |
            packages/**/*.exe
            packages/**/*.dmg
            packages/**/Vidoge-*-mac.zip
          draft: true # Creates a draft release for safety
